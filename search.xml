<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>云服务器上搭建kubernetes集群</title>
      <link href="post/undefined"/>
      <url>post/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="云服务器上搭建kubernetes集群"><a href="#云服务器上搭建kubernetes集群" class="headerlink" title="云服务器上搭建kubernetes集群"></a>云服务器上搭建kubernetes集群</h1><h3 id="使用的虚机百度云BCC，centos7-5-，2核4G"><a href="#使用的虚机百度云BCC，centos7-5-，2核4G" class="headerlink" title="使用的虚机百度云BCC，centos7.5 ，2核4G"></a>使用的虚机百度云BCC，centos7.5 ，2核4G</h3><p>yum源百度云官方自带yum源，腾讯，阿里云自带yum源都可参考该文档</p><p>搭建k8，一共三台虚机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master 192.168.0.8master跟etcd共用一台</span><br><span class="line">minion1 192.168.0.9</span><br><span class="line">minion2 192.168.0.10</span><br></pre></td></tr></table></figure><p>百度云虚机自带yum源就可以下载<br>三台虚机都需要安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# yum -y install kubernetes etcd flannel ntp</span><br><span class="line">[root@minion1 ~]# yum -y install kubernetes etcd flannel ntp</span><br><span class="line">[root@minion2 ~]# yum -y install kubernetes etcd flannel ntp</span><br></pre></td></tr></table></figure><p>关闭防火墙 三台同样需要关闭     注：若是生产环境不必关闭，写firewalld rule</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl stop firewalld &amp;&amp; systemctl disable firewalld &amp;&amp; systemctl status firewalld</span><br><span class="line">[root@minion1~]# systemctl stop firewalld &amp;&amp; systemctl disable firewalld &amp;&amp; systemctl status firewalld</span><br><span class="line">[root@minion2~]# systemctl stop firewalld &amp;&amp; systemctl disable firewalld &amp;&amp; systemctl status firewalld</span><br></pre></td></tr></table></figure><p>在hosts文件添加以下内容，执行一台，剩余拷贝就ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim &#x2F;etc&#x2F;hosts</span><br><span class="line">192.168.0.8 master</span><br><span class="line">192.168.0.8 etcd</span><br><span class="line">192.168.0.9 minion1</span><br><span class="line">192.168.0.10 minion2</span><br><span class="line">[root@master ~]# scp &#x2F;etc&#x2F;hosts 192.168.0.9:&#x2F;etc&#x2F;</span><br><span class="line">[root@master ~]# scp &#x2F;etc&#x2F;hosts 192.168.0.10:&#x2F;etc&#x2F;</span><br></pre></td></tr></table></figure><p>在master上配置etcd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim &#x2F;etc&#x2F;etcd&#x2F;etcd.conf </span><br><span class="line">改：2 ETCD NAME&#x3D;default</span><br><span class="line">为：2ETCD_NAME&#x3D;&quot;etcd&quot;</span><br><span class="line">ETCD_DATA_DIR&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;default.etcd&quot;</span><br><span class="line">改：9 ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;localhost:2379&quot;</span><br><span class="line">为：ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;localhost：2379,http:&#x2F;&#x2F;192.168.0.8:2379&quot;</span><br><span class="line">改：20 ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;localhost:2379&quot;</span><br><span class="line">为：ETCD_ADVERTISE_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;192.168.0.8:2379&quot;</span><br><span class="line">注释：    advertise [aedvetarz] 做广告，做宣传；通告，通知</span><br><span class="line">&#x2F;etc&#x2F;etcd&#x2F;etcd.conf 配置文件含意如下：</span><br><span class="line">ETCD_NAME&#x3D;&quot;etcd&quot;</span><br><span class="line">etcd节点名称，如果etcd 集群只有一台etcd，这一项可以注释不用配置，默认名称为default，这</span><br><span class="line">个名宇后面会用到。</span><br><span class="line">ETCD_DATA_DIR&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;etcd&#x2F;default.etcd&quot;</span><br><span class="line">etcd 存储数据的目录</span><br><span class="line">ETCD_LISTEN_CLIENT_URLS&#x3D;&quot;http:&#x2F;&#x2F;localhost:2379,http:&#x2F;&#x2F;192.168.1.63:2379&quot;</span><br><span class="line">etcd 对外服务监听地址，一般指定2379端口，如果为0.0.0.0将会监听所有接口</span><br><span class="line">ETCD_ARGS&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure><p>需要额外添加的参数，可以自己添加，etcd 的所有参数可以通过etcd-h查看。<br><strong>启动服务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl start etcd</span><br><span class="line">[root@master ~]# systemctl status etcd</span><br><span class="line">[root@master ~]# systemctl enable etcd</span><br><span class="line">[root@master ~]# netstat -anptu | grep 2379</span><br><span class="line">tcp        0      0 127.0.0.1:2379          0.0.0.0:*               LISTEN      2963&#x2F;etcd           </span><br><span class="line">tcp        0      0 192.168.0.8:2379        0.0.0.0:*               LISTEN      2963&#x2F;etcd           </span><br><span class="line">tcp        0      0 192.168.0.8:38866       192.168.0.8:2379        ESTABLISHED 2963&#x2F;etcd           </span><br><span class="line">tcp        0      0 127.0.0.1:2379          127.0.0.1:45804         ESTABLISHED 2963&#x2F;etcd           </span><br><span class="line">tcp        0      0 192.168.0.8:2379        192.168.0.8:38866       ESTABLISHED 2963&#x2F;etcd           </span><br><span class="line">tcp        0      0 127.0.0.1:45804         127.0.0.1:2379          ESTABLISHED 2963&#x2F;etcd           </span><br></pre></td></tr></table></figure><p>检查etcd集群列表，这里只有一台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# etcdctl member list</span><br><span class="line">8e9e05c52164694d: name&#x3D;etcd peerURLs&#x3D;http:&#x2F;&#x2F;localhost:2380 clientURLs&#x3D;http:&#x2F;&#x2F;192.168.0.8:2379 isLeader&#x3D;true</span><br></pre></td></tr></table></figure><p>在master配置master<br>修改kubernetets配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;config </span><br><span class="line">改：KUBE_MASTER&#x3D;&quot;--master&#x3D;http:&#x2F;&#x2F;127.0.0.1:8080&quot;</span><br><span class="line">为：KUBE_MASTER&#x3D;&quot;--master&#x3D;http:&#x2F;&#x2F;192.168.0.8:8080&quot;</span><br></pre></td></tr></table></figure><p>修改apiserver配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;apiserver</span><br><span class="line">[root@xuegod63 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;apiserver</span><br><span class="line">改：8 KUBE_API_ADDRESS&#x3D;&quot;--insecure-bind-address&#x3D;127.0.0.1&quot;</span><br><span class="line">为：8 KUBE_API_ADDRESS&#x3D;&quot;--insecure-bind-address&#x3D;0.0.0.0</span><br><span class="line">改：17 KUBE_ETCD_SERVERS&#x3D;&quot;--etcd-servers&#x3D;http:&#x2F;&#x2F;127.0.0.1:2379&quot;</span><br><span class="line">为：KUBE_ETCD_SERVERS&#x3D;&quot;--etcd-servers&#x3D;http:&#x2F;&#x2F;192.168.0.8:2379&quot;</span><br><span class="line">改23行：</span><br><span class="line">KUBE_ADMISSION_CONTROL&#x3D;&quot;--admission-control&#x3D;NamespaceLifecycle,NamespaceExist</span><br><span class="line">s,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;</span><br><span class="line">为：KUBE_ADMISSION_CONTROL&#x3D;&quot;--admission-control&#x3D;AlwaysAdmit&quot; #这里必须配置</span><br><span class="line">正确</span><br></pre></td></tr></table></figure><p>配置kube-controller-manager配置文件<br>默认不需要改动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# cat &#x2F;etc&#x2F;kubernetes&#x2F;controller-manager </span><br></pre></td></tr></table></figure><p>配置kube-scheduler配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;scheduler </span><br><span class="line">改：KUBE_SCHEDULER_ARGS&#x3D;&quot; &quot;</span><br><span class="line">为：KUBE_SCHEDULER_ARGS&#x3D;&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure><p>设置etcd网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# etcdctl set &#x2F;k8s&#x2F;network&#x2F;config &#39;&#123;&quot;Network&quot;:&quot;10.255.0.0&#x2F;16&quot;&#125;&#39;   &#x2F;&#x2F;用于存储flanneld网络信息</span><br><span class="line">[root@master ~]# etcdctl get &#x2F;k8s&#x2F;network&#x2F;config      &#x2F;&#x2F;查看</span><br><span class="line">&#123;&quot;Network&quot;:&quot;10.255.0.0&#x2F;16&quot;&#125;</span><br></pre></td></tr></table></figure><p>配置flanneld服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;flanneld </span><br><span class="line">改：4FLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:2379&quot;</span><br><span class="line">为：4FLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;192.168.0.8:2379&quot;</span><br><span class="line">改:8 FLANNEL_ETCD_PREFIX&#x3D;&quot;&#x2F;atomic.io&#x2F;network&quot;</span><br><span class="line">为：8 FLANNEL_ETCD_PREFIX&#x3D;&quot;&#x2F;k8s&#x2F;network&quot;</span><br><span class="line">#注其中&#x2F;k8s&#x2F;network 与上面 etcd 中的 Network 对应</span><br><span class="line">改：11 #FLANNEL_OPTIONS&#x3D;&quot;&quot;</span><br><span class="line">为：11 FLANNEL_OPTIONS&#x3D;&quot;--iface&#x3D;eth0&quot; #指定 通信的物理网卡</span><br><span class="line">[root@master ~]# systemctl restart flanneld.service </span><br><span class="line">[root@master ~]# systemctl status flanneld.service </span><br><span class="line">[root@master ~]# cat &#x2F;run&#x2F;flannel&#x2F;subnet.env  &#x2F;&#x2F;查看&#x2F;run&#x2F;flannel&#x2F;subnet.env 子网信息</span><br><span class="line">FLANNEL_NETWORK&#x3D;10.255.0.0&#x2F;16</span><br><span class="line">FLANNEL_SUBNET&#x3D;10.255.6.1&#x2F;24</span><br><span class="line">FLANNEL_MTU&#x3D;1472</span><br><span class="line">FLANNEL_IPMASQ&#x3D;false</span><br></pre></td></tr></table></figure><p>之后会有一个脚本姜subnet.env转写程一个docker的环境变量文件/run/flannel/docker<br>docker0的地址是由 /run/flannel/subnet.env 的FLANNEL_SUBENT参数决定的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# cat &#x2F;run&#x2F;flannel&#x2F;docker </span><br><span class="line">DOCKER_OPT_BIP&#x3D;&quot;--bip&#x3D;10.255.6.1&#x2F;24&quot;</span><br><span class="line">DOCKER_OPT_IPMASQ&#x3D;&quot;--ip-masq&#x3D;true&quot;</span><br><span class="line">DOCKER_OPT_MTU&#x3D;&quot;--mtu&#x3D;1472&quot;</span><br><span class="line">DOCKER_NETWORK_OPTIONS&#x3D;&quot; --bip&#x3D;10.255.6.1&#x2F;24 --ip-masq&#x3D;true --mtu&#x3D;1472&quot;</span><br></pre></td></tr></table></figure><p>启动master上的4个服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# systemctl restart kube-apiserver kube-controller-manager kube-scheduler flanneld</span><br><span class="line">[root@master ~]# systemctl status kube-apiserver kube-controller-manager kube-scheduler flanneld</span><br><span class="line">[root@master ~]# systemctl enable kube-apiserver kube-controller-manager kube-scheduler flanneld</span><br></pre></td></tr></table></figure><p><strong>到此master和etcd节点配置成功</strong></p><p>配置minion1,采用flannel方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# vim &#x2F;etc&#x2F;sysconfig&#x2F;flanneld </span><br><span class="line">改：4FLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:2379&quot;</span><br><span class="line">为：4FLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;192.168.0.8:2379&quot;</span><br><span class="line">改:8 FLANNEL_ETCD_PREFIX&#x3D;&quot;&#x2F;atomic.io&#x2F;network&quot;</span><br><span class="line">为：8 FLANNEL_ETCD_PREFIX&#x3D;&quot;&#x2F;k8s&#x2F;network&quot;</span><br><span class="line">#注其中&#x2F;k8s&#x2F;network 与上面 etcd 中的 Network 对应</span><br><span class="line">改：11 #FLANNEL_OPTIONS&#x3D;&quot;&quot;</span><br><span class="line">为：11 FLANNEL_OPTIONS&#x3D;&quot;--iface&#x3D;eth0&quot; #指定 通信的物理网卡</span><br></pre></td></tr></table></figure><p>配置minion1上的master地址和kube-proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;config </span><br><span class="line">改：KUBE_MASTER&#x3D;&quot;--master&#x3D;http:&#x2F;&#x2F;127.0.01:8080&quot;</span><br><span class="line">为：KUBE_MASTER&#x3D;&quot;--master&#x3D;http:&#x2F;&#x2F;192.168.0.8:8080&quot;</span><br></pre></td></tr></table></figure><p>kube-proxy默认不需要改动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# grep -v &#39;^#&#39; &#x2F;etc&#x2F;kubernetes&#x2F;proxy </span><br><span class="line">KUBE_PROXY_ARGS&#x3D;&quot;&quot;</span><br></pre></td></tr></table></figure><p>配置minion1 kubelet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;kubelet </span><br><span class="line">改：5 KUBELET_ADDRESS&#x3D;&quot;--address&#x3D;127.0.0.1&quot;</span><br><span class="line">为：5KUBELET_ADDRESS&#x3D;&quot;--address&#x3D;0.0.0.0&quot; #默认只监听127.0.0.1，要改成：0.0.0.0，</span><br><span class="line">因为后期要使用kubectl 远程连接到kubelet 服务上，来查看 pod 及 pod 中容器的状态。如果是 127</span><br><span class="line">就无法远程连接kubelet服务。</span><br><span class="line">改：11 KUBELET_HOSTNAME&#x3D;&quot;--hostname-override&#x3D;127.0.0.1&quot;</span><br><span class="line">为：11 KUBELET_HOSTNAME&#x3D;&quot;_-hostname-override&#x3D;minion1&quot; # minion 的主机名，设置</span><br><span class="line">成和本主机机名一样，便于识别。</span><br><span class="line">改：14 KUBELET_API_SERVER&#x3D;&quot;--api-servers&#x3D;http:&#x2F;&#x2F;127.0.0.1:8080&quot;</span><br><span class="line">为：14 KUBELET_API_SERVER&#x3D;&quot;--api-servers&#x3D;http:&#x2F;&#x2F;192.168.0.8:8080&quot; #批定 apiserver</span><br><span class="line">的地址</span><br></pre></td></tr></table></figure><p>启动minion1服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# systemctl restart flanneld kube-proxy kubelet docker</span><br><span class="line">[root@minion1 ~]# systemctl enable flanneld kube-proxy kubelet docker</span><br><span class="line">[root@minion1 ~]# systemctl status flanneld kube-proxy kubelet docker</span><br><span class="line">查看</span><br><span class="line">[root@minion1 ~]# ifconfig</span><br><span class="line">docker0: flags&#x3D;4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.255.90.1  netmask 255.255.255.0  broadcast 0.0.0.0</span><br><span class="line">        ether 02:42:0c:ce:9d:7d  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">flannel0: flags&#x3D;4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472</span><br><span class="line">        inet 10.255.90.0  netmask 255.255.0.0  destination 10.255.90.0</span><br><span class="line">        inet6 fe80::6062:c456:9093:278b  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 3  bytes 144 (144.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>查看kube-proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# netstat -antup | grep proxy</span><br><span class="line">tcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      3242&#x2F;kube-proxy     </span><br><span class="line">tcp        0      0 192.168.0.9:53976       192.168.0.8:8080        ESTABLISHED 3242&#x2F;kube-proxy     </span><br><span class="line">tcp        0      0 192.168.0.9:53974       192.168.0.8:8080        ESTABLISHED 3242&#x2F;kube-proxy  </span><br></pre></td></tr></table></figure><p>配置minion2,采用flannel方式，和minion1配置一样<br>这里 直接将minion1的的配置文件拷贝到minion2了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# scp &#x2F;etc&#x2F;sysconfig&#x2F;flanneld 189.168.0.10:&#x2F;etc&#x2F;sysconfig&#x2F;</span><br><span class="line">再次确认拷贝正确</span><br><span class="line">[root@minion2 ~]# grep -v &#39;^#&#39; &#x2F;etc&#x2F;sysconfig&#x2F;flanneld </span><br><span class="line"></span><br><span class="line">FLANNEL_ETCD_ENDPOINTS&#x3D;&quot;http:&#x2F;&#x2F;192.168.0.8:2379&quot;</span><br><span class="line"></span><br><span class="line">FLANNEL_ETCD_PREFIX&#x3D;&quot;&#x2F;k8s&#x2F;network&quot;</span><br><span class="line"></span><br><span class="line">FLANNEL_OPTIONS&#x3D;&quot;--iface&#x3D;eth0&quot;</span><br><span class="line">[root@minion2 ~]# systemctl start flanneld.service </span><br><span class="line">[root@minion2 ~]# ifconfig </span><br><span class="line">flannel0: flags&#x3D;4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1472</span><br><span class="line">        inet 10.255.50.0  netmask 255.255.0.0  destination 10.255.50.0</span><br><span class="line">        inet6 fe80::435b:45bf:df6b:58c  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2  bytes 96 (96.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>配置minion2上的地址和kube-proxy<br>这里也直接拷贝minion1的配置文件了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# scp &#x2F;etc&#x2F;kubernetes&#x2F;config 192.168.0.10:&#x2F;etc&#x2F;kubernetes&#x2F;</span><br><span class="line">[root@minion1 ~]# scp &#x2F;etc&#x2F;kubernetes&#x2F;proxy 192.168.0.10:&#x2F;etc&#x2F;kubernetes&#x2F;</span><br><span class="line">[root@minion2 ~]# systemctl start kube-proxy</span><br><span class="line">[root@minion2 ~]# netstat -anptu | grep proxy</span><br><span class="line">tcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      29942&#x2F;kube-proxy    </span><br><span class="line">tcp        0      0 192.168.0.10:59170      192.168.0.8:8080        ESTABLISHED 29942&#x2F;kube-proxy    </span><br><span class="line">tcp        0      0 192.168.0.10:59168      192.168.0.8:8080        ESTABLISHED 29942&#x2F;kube-proxy    </span><br><span class="line">tcp        0      0 192.168.0.10:59166      192.168.0.8:8080        ESTABLISHED 29942&#x2F;kube-proxy    </span><br></pre></td></tr></table></figure><p>配置minion2 kubelet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@minion1 ~]# scp &#x2F;etc&#x2F;kubernetes&#x2F;kubelet 192.168.0.10:&#x2F;etc&#x2F;kubernetes&#x2F;</span><br><span class="line">root@192.168.0.10 password: </span><br><span class="line">kubelet                                                                                               100%  613     1.6MB&#x2F;s   00:00  </span><br><span class="line">[root@minion2 ~]# vim &#x2F;etc&#x2F;kubernetes&#x2F;kubelet </span><br><span class="line">改：KUBELET_HOSTNAME&#x3D;&quot;--hostname-override&#x3D;minion1&quot;</span><br><span class="line">为：KUBELET_HOSTNAME&#x3D;&quot;--hostname-override&#x3D;minion2&quot;</span><br><span class="line">[root@minion2 ~]# systemctl start kubelet</span><br><span class="line">[root@minion2 ~]# netstat -antup | grep 8080    &#x2F;&#x2F;查看：已建立连接</span><br><span class="line">tcp        0      0 192.168.0.10:59216      192.168.0.8:8080        TIME_WAIT   -                   </span><br><span class="line">tcp        0      0 192.168.0.10:59168      192.168.0.8:8080        ESTABLISHED 29942&#x2F;kube-proxy    </span><br><span class="line">tcp        0      0 192.168.0.10:59212      192.168.0.8:8080        ESTABLISHED 32339&#x2F;kubelet       </span><br><span class="line">tcp        0      0 192.168.0.10:59214      192.168.0.8:8080        ESTABLISHED 32339&#x2F;kubelet       </span><br><span class="line">tcp        0      0 192.168.0.10:59218      192.168.0.8:8080        ESTABLISHED 32339&#x2F;kubelet       </span><br><span class="line">tcp        0      0 192.168.0.10:59166      192.168.0.8:8080        ESTABLISHED 29942&#x2F;kube-proxy    </span><br><span class="line">tcp        0      0 192.168.0.10:59210      192.168.0.8:8080        ESTABLISHED 32339&#x2F;kubelet       </span><br><span class="line">[root@minion2 ~]# systemctl restart flanneld kube-proxy kubelet docker</span><br><span class="line">[root@minion2 ~]# systemctl enable flanneld kube-proxy kubelet docker</span><br><span class="line">[root@minion2 ~]# systemctl status flanneld kube-proxy kubelet docker</span><br></pre></td></tr></table></figure><p>ifconfig查看docker0 IP  minion1和minion2是不一样的</p><p>到master主机上查看集群运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# kubectl get nodes</span><br><span class="line">NAME      STATUS    AGE</span><br><span class="line">minion1   Ready     26m</span><br><span class="line">minion2   Ready     7m</span><br></pre></td></tr></table></figure><p><strong>到此整个集群搭建完成</strong></p><blockquote><p>总结：kubernetes 每个节点需要启动的服务和开放端口号<br>在本实验中kubernetes4个结点一共需要启动13个服务，开6个端口号。<br>详情如下：~<br>etcd:一共1个服务 ，通讯使用 2379 端口<br>启动服务<br>[root@master（etcd）~]#systemctl restart etcd<br>master:一共4个服务，通讯使用 8080端口<br>[root@master（etcd）–]# systemctl restart kube-apiserver kube-controller-manager<br>kube-scheduler flanneld<br>minion1:一共4个服务<br>kubeproxy 监控听端口号是 10249 , kubelet 监听端口 10248、10250、10255 三个端口<br>[root@minion1 –]# systemctl restart flanneld kube-proxy kubelet docker<br>minion2:一共4个服务<br>[root@minion2 ~]# systemctl restart flanneld kube-proxy kubelet docker</p></blockquote><h3 id="点击前往作者CSDN博客"><a href="#点击前往作者CSDN博客" class="headerlink" title="点击前往作者CSDN博客"></a><a href="https://me.csdn.net/weixin_45509582">点击前往作者CSDN博客</a></h3>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes集群搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx反向代理+nginx性能优化配置详解</title>
      <link href="post/undefined"/>
      <url>post/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>代理服务可简单的分为正向代理和反向代理:</p><p>正向代理: 用于代理内部网络对Internet的连接请求(如VPN/NAT),客户端指定代理服务器,并将本来要直接发送给目标Web服务器的HTTP请求先发送到代理服务器上,然后由代理服务器去访问Web服务器<a id="more"></a>, 并将Web服务器的Response回传给客户端: </p><p>反向代理: 与正向代理相反,如果局域网向Internet提供资源,并让Internet上的其他用户可以访问局域网内资源, 也可以设置一个代理服务器, 它提供的服务就是反向代理. 反向代理服务器接受来自Internet的连接,然后将请求转发给内部网络上的服务器,并将Response回传给Internet上请求连接的客户端: </p><h2 id="一、Nginx反向代理-Web服务器的调度器："><a href="#一、Nginx反向代理-Web服务器的调度器：" class="headerlink" title="一、Nginx反向代理=Web服务器的调度器："></a>一、Nginx反向代理=Web服务器的调度器：</h2><p>（1.）反向代理（Reverse Proxy）方式是指以代理服务器来接受客户端的连接请求，然后将请求转发给网络上的web服务器（可能是apache、nginx、tomcat、iis等），并将从web服务器上得到的结果返回给请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><p>从上图可以看出：反向代理服务器代理网站Web服务器接收Http请求，对请求进行转发。而且nginx作为反向代理服务器可以根据用户请求的内容把请求转发给后端不同的web服务器，例如静动分离，再例如在nginx上创建多个虚拟主机，这样就成功的做到了在浏览器中输入不同域名（url）的时候访问后端的不同web服务器或web群集。</p><p>（2.）反向代理的作用</p><ul><li>保护网站安全：任何来自Internet的请求都必须先经过代理服务器；</li><li>通过配置缓存功能加速Web请求：可以缓存真实Web服务器上的某些静态资源，减轻真实Web服务器的负载压力；</li><li>实现负载均衡：充当负载均衡服务器均衡地分发请求，平衡集群中各个服务器的负载压力；</li></ul><h2 id="二、什么是nginx"><a href="#二、什么是nginx" class="headerlink" title="二、什么是nginx"></a>二、什么是nginx</h2><h3 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h3><p>Nginx是一款轻量级的网页服务器、反向代理器以及电子邮件代理服务器。因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。Nginx（发音同engine x），它是由俄罗斯程序员Igor Sysoev所开发的。起初是供俄国大型的门户网站及搜索引擎Rambler（俄语：Рамблер）使用。此软件BSD-like协议下发行，可以在UNIX、GNU/Linux、BSD、Mac OS X、Solaris，以及Microsoft Windows等操作系统中运行。</p><p>Nginx的应用现状：</p><p>Nginx 已经在俄罗斯最大的门户网站── Rambler Media（<a href="http://www.rambler.ru）上运行，同时俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。">www.rambler.ru）上运行，同时俄罗斯超过20%的虚拟主机平台采用Nginx作为反向代理服务器。</a></p><p>在国内，已经有淘宝、新浪博客、新浪播客、网易新闻、六间房、56.com、Discuz!、水木社区、豆瓣、YUPOO、海内、迅雷在线等多家网站使用 Nginx 作为Web服务器或反向代理服务器。</p><h3 id="Nginx的核心特点"><a href="#Nginx的核心特点" class="headerlink" title="Nginx的核心特点"></a>Nginx的核心特点</h3><ul><li><p>跨平台：Nginx 可以在大多数OS编译运行，而且也有Windows的版本；</p></li><li><p>配置异常简单：非常容易上手。</p></li><li><p>非阻塞、高并发连接：官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数。（这得益于Nginx使用了最新的epoll模型）；</p></li></ul><p>注意：</p><p>对于一个Web服务器来说，首先看一个请求的基本过程：建立连接—接收数据—发送数据，在系统底层看来：上述过程（建立连接—接收数据—发送数据）在系统底层就是读写事件。</p><p>如果采用阻塞调用的方式，当读写事件没有准备好时，那么就只能等待，当前线程被挂起，等事件准备好了，才能进行读写事件。</p><p>如果采用非阻塞调用的方式：事件马上返回，告诉你事件还没准备好呢，过会再来吧。过一会，再来检查一下事件，直到事件准备好了为止，在这期间，你就可以先去做其它事情，然后再来看看事件好了没。虽然不阻塞了，但你得不时地过来检查一下事件的状态，你可以做更多的事情了，但带来的开销也是不小的。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程</p><ul><li>事件驱动：通信机制采用epoll模型，支持更大的并发连接。</li></ul><p>非阻塞通过不断检查事件的状态来判断是否进行读写操作，这样带来的开销很大，因此就有了异步非阻塞的事件处理机制。这种机制让你可以同时监控多个事件，调用他们是非阻塞的，但可以设置超时时间，在超时时间之内，如果有事件准备好了，就返回。这种机制解决了上面阻塞调用与非阻塞调用的两个问题。</p><p>以epoll模型为例：当事件没有准备好时，就放入epoll(队列)里面。如果有事件准备好了，那么就去处理；当事件没有准备好时，才在 epoll里面等着。这样，我们就可以并发处理大量的并发了，当然，这里的并发请求，是指未处理完的请求。线程只有一个，所以同时能处理的请求当然只有一个了，只是在请求之间进行不断地切换而已，切换也是因为异步事件未准备好，而主动让出的。这里的切换是没有任何代价，你可以理解为循环处理多个准备好的事件。</p><p>多线程方式相比，这种事件处理方式是有很大的优势的，不需要创建线程，每个请求占用的内存也很少，没有上下文切换，事件处理非常的轻量级，并发数再多也不会导致无谓的资源浪费（上下文切换）。对于apache服务器，每个请求会独占一个工作线程，当并发数上到几千时，就同时有几千的线程在处理请求了。这对操作系统来说，是个不小的挑战：因为线程带来的内存占用非常大，线程的上下文切换带来的cpu开销很大，自然性能就上不去，从而导致在高并发场景下性能下降严重。</p><p>总结：通过异步非阻塞的事件处理机制，Nginx实现由进程循环处理多个准备好的事件，从而实现高并发和轻量级。</p><ul><li>Master/Worker结构：一个master进程，生成一个或多个worker进程。注意：<br>Master-Worker设计模式主要包含两个主要组件Master和Worker，Master维护着Worker队列，将请求下发到多个Worker并行执行，Worker主要进行实际逻辑计算，并将结果返回给Master。</li></ul><p>nginx采用这种进程模型有什么好处？采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，Master 进程则很快重新启动新的Worker进程。当然，Worker进程的异常退出，肯定是程序有bug了，异常退出，会导致当前Worker上的所有请求失败，不过不会影响到所有work请求，所以降低了风险。</p><ul><li><p>内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个Nginx 进程才消耗150M内存（15M*10=150M）。</p></li><li><p>内置的健康检查功能：如果 Nginx 代理的后端的某台 Web 服务器宕机了，不会影响前端访问。</p></li><li><p>节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。</p></li><li><p>稳定性高：用于反向代理，宕机的概率微乎其微。</p></li></ul><h2 id="三、Nginx（反向代理）-apache构建Web服务器集群的负载均衡"><a href="#三、Nginx（反向代理）-apache构建Web服务器集群的负载均衡" class="headerlink" title="三、Nginx（反向代理）+apache构建Web服务器集群的负载均衡"></a>三、Nginx（反向代理）+apache构建Web服务器集群的负载均衡</h2><p>nginx配置反向代理</p><p>配置nginx作为反向代理和负载均衡，同时利用其缓存功能，将静态页面放在nginx上缓存，以达到降低后端服务器连接数的目的并检查后端web服务器的健康状况。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>环境：</p><p>OS:centos7.2</p><p>nginx：192.168.197.169</p><p>apache1:192.168.197.167</p><p>apache2:192.168.197.168</p><p>本人声明：由于之前已经介绍过安装Apache服务，所以这里不再一一讲解：<br>如果想看Apache详细的安装过程，请点击下面的链接即可：</p><p>Apache安装：<a href="http://blog.csdn.net/kangshuo2471781030/article/details/79171344">http://blog.csdn.net/kangshuo2471781030/article/details/79171344</a></p><p>（1.）安装zlib-devel、pcre-devel等Nginx相关依赖包以及gcc编译环境</p><p>yum -y install gcc gcc-c++ make libtool zlib zlib-devel pcre pcre-devel openssl openssl-devel</p><p>注意：</p><p>结合proxy和upstream模块实现后端web负载均衡</p><p>使用proxy模块实现静态文件缓存</p><p>结合nginx默认自带的 ngx_http_proxy_module 模块 和ngx_http_upstream_module模块实现后端服务器的健康检查，也可以使用第三方模块nginx_upstream_check_module</p><p>使用nginx-sticky-module扩展模块实现Cookie会话黏贴（保持会话）</p><p>使用ngx_cache_purge实现更强大的缓存清除功能</p><p>上面提到的2个模块都属于第三方扩展模块，需要提前下好源码，然后编译时通过–add-moudle=src_path一起安装。</p><p>（2.）创建Nginx用户和组，并且把用户加入到组里不让用户在控制台登录</p><p>[root@kang ~]# groupadd www<br>[root@kang ~]# useradd -g www www -s /sbin/nologin<br>（3.）编译安装Nginx<br>可以到官网去下载最新版本Nginx：<a href="http://nginx.org/download/nginx-1.13.8.tar.gz">http://nginx.org/download/nginx-1.13.8.tar.gz</a></p><p>本章使用的是nginx-1.10.2.tar.gz版本来演示：</p><p>#tar zxf nginx-1.10.2.tar.gz</p><p>#tar zxf ngx_cache_purge-2.3.tar.gz</p><p> #tar zxf master.tar.gz</p><p>[root@kang ~]# tar zxf nginx-1.10.2.tar.gz<br>[root@kang ~]# tar zxf ngx_cache_purge-2.3.tar.gz<br>[root@kang ~]# tar zxf master.tar.gz<br>[root@kang ~]# cd nginx-1.10.2/<br>[root@kang nginx-1.10.2]# </p><p>注意：nginx的所有模块必须在编译的时候添加，不能再运行的时候动态加载。<br>[root@kang nginx-1.10.2]#  ./configure –prefix=/usr/local/nginx1.10 –user=www –group=www –with-http_stub_status_module –with-http_realip_module –with-http_ssl_module –with-http_gzip_static_module –http-client-body-temp-path=/var/tmp/nginx/client –http-proxy-temp-path=/var/tmp/nginx/proxy –http-fastcgi-temp-path=/var/tmp/nginx/fcgi –with-pcre –add-module=../ngx_cache_purge-2.3 –with-http_flv_module  –add-module=../nginx-goodies-nginx-sticky-module-ng-08a395c66e42</p><p>[root@kang nginx-1.10.2]# make &amp;&amp; make install</p><p>注意：nginx的所有模块必须在编译的时候添加，不能再运行的时候动态加载。</p><p>（4.）优化nginx程序的执行路径</p><p>[root@kang nginx-1.10.2]# ln -s /usr/local/nginx1.10/sbin/nginx /usr/local/sbin/<br>（5.）检测Nginx服务是否有错误<br>[root@kang nginx-1.10.2]# nginx -t<br>发现报如下错误信息：</p><p>（6.）那是因为没有那个指定的目录，所以接下来创建指定的目录，并设置相关操作权限</p><p>[root@kang nginx-1.10.2]# mkdir -p /var/tmp/nginx/client<br>[root@kang nginx-1.10.2]# chown -R www:www /var/tmp/nginx/<br>（7.）再次测试执行<br>nginx -t</p><p>2.编写Nginx服务脚本</p><h3 id="编写Nginx服务脚本"><a href="#编写Nginx服务脚本" class="headerlink" title="编写Nginx服务脚本"></a>编写Nginx服务脚本</h3><p>[root@kang ~]# vi /etc/init.d/nginx<br> 内容如下：<br>#!/bin/bash<br>#chkconfig: 2345 99 20<br>#description: Nginx Service Control Script<br>PROG=”/usr/local/nginx1.10/sbin/nginx”<br>PIDF=”/usr/local/nginx1.10/logs/nginx.pid”<br>case “$1” in<br>  start)<br>   netstat -anplt |grep “:80” &amp;&gt; /dev/null &amp;&amp; pgrep “nginx” &amp;&gt; /dev/null<br>   if [ $? -eq 0 ]<br>   then<br>     echo “Nginx service already running.”<br>   else<br>     $PROG -t &amp;&gt; /dev/null<br>     if [ $? -eq 0 ] ; then<br>       $PROG<br>       echo “Nginx service start success.”<br>     else<br>     $PROG -t<br>     fi<br>   fi<br>   ;;<br>  stop)<br>   netstat -anplt |grep “:80” &amp;&gt; /dev/null &amp;&amp; pgrep “nginx” &amp;&gt; /dev/null<br>   if [ $? -eq 0 ]<br>   then<br>    kill -s QUIT $(cat $PIDF)<br>    echo “Nginx service stop success.”<br>   else<br>    echo “Nginx service already stop”<br>   fi<br>   ;;<br>  restart)<br>    $0 stop<br>    $0 start<br>    ;;<br>  status)<br>   netstat -anplt |grep “:80” &amp;&gt; /dev/null &amp;&amp; pgrep “nginx” &amp;&gt; /dev/null<br>   if [ $? -eq 0 ]<br>   then<br>     echo “Nginx service is running.”<br>   else<br>     echo “Nginx is stop.”<br>   fi<br>  ;;<br>  reload)<br>   netstat -anplt |grep “:80” &amp;&gt; /dev/null &amp;&amp; pgrep “nginx” &amp;&gt; /dev/null<br>   if [ $? -eq 0 ]<br>   then<br>    $PROG -t &amp;&gt; /dev/null<br>    if [ $? -eq 0 ] ; then<br>      kill -s HUP $(cat $PIDF)<br>      echo “reload Nginx config success.”<br>    else<br>      $PROG -t<br>    fi<br>   else<br>    echo “Nginx service is not run.”<br>   fi<br>    ;;<br>  *)<br>   echo “Usage: $0 {start|stop|restart|reload}”<br>   exit 1<br>esac</p><p>（2.）给脚本添加可执行权限，以及设置服务开机自启动</p><p>[root@kang ~]# chmod +x /etc/init.d/nginx<br>[root@kang ~]# chkconfig –add nginx<br>[root@kang ~]# chkconfig nginx on<br>（3.）启动Nginx服务，查看端口</p><p>（4.）访问Nginx网站测试</p><p>注意：关闭防火墙或者放行80端口：</p><p>[root@kang ~]# firewall-cmd –permanent –add-port=80/tcp<br>success<br>[root@kang ~]# firewall-cmd  –reload<br>success<br>[root@kang ~]# </p><p>注意：如果你想在已安装好的nginx上添加第三方模块，依然需要重新编译，但为了不覆盖你原有的配置，请不要make install，而是直接拷贝可执行文件：</p><p>[root@kang ~]# nginx -V</p><p>[root@www nginx-1.10.2]#./configure  –add-module=……   #你的第三方模块<br>[root@www nginx-1.10.2] #make后不要make install,改为手动拷贝，先备份<br>[root@www nginx-1.10.2] #cp /usr/local/nginx1.10/sbin/nginx /usr/local/nginx1.10/sbin/nginx.bak<br>[root@www nginx-1.10.2] #cp objs/nginx /usr/local/nginx1.10/sbin/nginx</p><h2 id="相关模块功能详解"><a href="#相关模块功能详解" class="headerlink" title="相关模块功能详解"></a>相关模块功能详解</h2><p>（1.）查看Nginx加载的模块</p><p>注意：nginx的所有模块必须在编译的时候添加，不能再运行的时候动态加载。</p><p>（2.）nginx-sticky-module模块：<br>到同一个后端服务器上处理，这样一定程度上可以解决多个backend servers的session同步的问题 —— 因为不再需要同步，而RR轮询模式必须要运维人员自己考虑session同步的实现。<br>这个模块的作用是通过cookie黏贴的方式将来自同一个客户端（浏览器）的请求发送</p><p>另外内置的 ip_hash 也可以实现根据客户端IP来分发请求，但它很容易造成负载不均衡的情况，而如果nginx前面有CDN网络或者来自同一局域网的访问，它接收的客户端IP是一样的，容易造成负载不均衡现象。nginx-sticky-module的cookie过期时间，默认浏览器关闭就过期。</p><p>这个模块并不合适不支持 Cookie 或手动禁用了cookie的浏览器，此时默认sticky就会切换成RR。它不能与ip_hash同时使用。</p><p>例如：<br>upstream backend {<br>        server 192.168.31.141:80 weight=1;<br>        server 192.168.31.250:80 weight=1;<br>        sticky; 重点模块<br>}<br>配置起来超级简单，一般来说一个sticky指令就够了。</p><p>相关信息可以查看官方文档<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng">https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng</a></p><p> （3.）load-balance其它调度方案：</p><p>这里顺带介绍一下nginx的负载均衡模块支持的其它调度算法：</p><p>轮询（默认） ：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权值，Weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</p><p>ip_hash ： 每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。当然如果这个节点不可用了，会发到下个节点，而此时没有session同步的话就注销掉了。</p><p>least_conn ：请求被发送到当前活跃连接最少的realserver上。会考虑weight的值。</p><p>url_hash ： 此方法按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包 nginx_upstream_hash 。</p><p>fair ：这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的 upstream_fair 模块。</p><p>（4.）负载均衡与健康检查：</p><p>严格来说，nginx自带是没有针对负载均衡后端节点的健康检查的，但是可以通过默认自带的 ngx_http_proxy_module 模块和ngx_http_upstream_module 模块中的相关指令来完成当后端节点出现故障时，自动切换到下一个节点来提供访问。</p><p>例如：</p><p>upstream backend {<br>        sticky;<br>        server 192.168.31.141:80 weight=1 max_fails=2 fail_timeout=10s;<br>        server 192.168.31.250:80 weight=1 max_fails=2 fail_timeout=10s;<br>}<br>server {<br>   ……<br>location / {<br>            proxy_pass <a href="http://backend/">http://backend</a>;<br>}<br>……<br>}<br>weight ： 轮询权值也是可以用在ip_hash的，默认值为1</p><p>max_fails ： 允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream模块定义的错误。</p><p>fail_timeout ： 有两层含义，一是在10s 时间内最多容许2 次失败；二是在经历了 2 次失败以后，10s时间内不分配请求到这台服务器。</p><p>（5.）nginx的proxy缓存使用：</p><p>缓存也就是将js、css、image等静态文件从后端服务器缓存到nginx指定的缓存目录下，既可以减轻后端服务器负担，也可以加快访问速度，但这样缓存及时清理成为了一个问题，所以需要 ngx_cache_purge 这个模块来在过期时间未到之前，手动清理缓存。</p><p>proxy模块中常用的指令时proxy_pass和proxy_cache.</p><p>nginx的web缓存功能的主要是由proxy_cache、fastcgi_cache指令集和相关指令集完成，proxy_cache指令负责反向代理缓存后端服务器的静态内容，fastcgi_cache主要用来处理FastCGI动态进程缓存。</p><p>例如：</p><p>http {<br>    #$upstream_cache_status记录缓存命中率<br>log_format  main  ‘$remote_addr - $remote_user [$time_local] “$request” ‘<br>                      ‘$status $body_bytes_sent “$http_referer” ‘<br>                      ‘“$http_user_agent” “$http_x_forwarded_for”‘<br>                      ‘“$upstream_cache_status”‘;<br>access_log  logs/access.log  main;<br>proxy_buffering on;   #代理的时候，开启或关闭缓冲后端服务器的响应<br>proxy_temp_path /usr/local/nginx1.10/proxy_temp;<br>   proxy_cache_path /usr/local/nginx1.10/proxy_cache levels=1:2 keys_zone=my-cache:100m  inactive=600m max_size=2g;<br>    server {<br>        listen       80;<br>        server_name  localhost;<br>        root   html;<br>        index  index.php index.html index.htm;<br>        #ngx_cache_purge实现缓存清除<br>        location  ~/purge(/.*) {<br>           allow 127.0.0.1;<br>           allow 192.168.31.0/24;<br>           deny all;<br>           proxy_cache_purge my-cache $host$1$is_args$args;<br>        }<br>      location ~ .<em>.(gif|jpg|png|html|htm|css|js|ico|swf|pdf)(.</em>) {<br>           proxy_pass  <a href="http://backend/">http://backend</a>;<br>           proxy_redirect off;<br>           proxy_set_header Host $host;<br>           proxy_set_header X-Real-IP $remote_addr;<br>           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>           proxy_ignore_headers Set-Cookie;<br>proxy_hide_header Set-Cookie;<br>           proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;<br>           proxy_cache my-cache;<br>           add_header Nginx-Cache $upstream_cache_status;<br>           proxy_cache_valid 200 304 301 302 8h;<br>           proxy_cache_valid 404 1m;<br>           proxy_cache_valid any 1d;<br>           proxy_cache_key $host$uri$is_args$args;<br>           expires 30d;<br>       }<br>相关选项说明：</p><p>proxy_buffering on; 代理的时候，开启或关闭缓冲后端服务器的响应。</p><p>当开启缓冲时，nginx尽可能快地从被代理的服务器接收响应，再将它存入缓冲区中。</p><p>proxy_temp_path ： 缓存临时目录。后端的响应并不直接返回客户端，而是先写到一个临时文件中，然后被rename一下当做缓存放在 proxy_cache_path 。0.8.9版本以后允许temp和cache两个目录在不同文件系统上（分区），然而为了减少性能损失还是建议把它们设成一个文件系统上。</p><p>proxy_cache_path： 设置缓存目录，目录里的文件名是cache_key 的MD5值。</p><p>levels=1:2 keys_zone=my-cache:100m表示采用2级目录结构，第一层目录只有一个字符，是由levels=1:2设置，总共二层目录，子目录名字由二个字符组成。Web缓存区名称为my-cache，内存缓存空间大小为100MB，这个缓冲zone可以被多次使用。文件系统上看到的缓存文件名类似于 /usr/local/nginx1.10/proxy_cache/c/29/b7f54b2df7773722d382f4809d65029c。</p><p>inactive=600 max_size=2g表示600分钟没有被访问的内容自动清除，硬盘最大缓存空间为2GB，超过这个大学将清除最近最少使用的数据。</p><p>需要在默认情况，nginx不缓存从后端响应的http头中带有Set-Cookie的对象。如果客户端发送的请求带有Cookie header，varnish将忽略缓存，直接将请求传递到后端。nginx中通过proxy_ignore_headers设置忽略它们，设置方法如下：</p><p>解决办法：  </p><p>proxy_ignore_headers Set-Cookie;</p><p>proxy_hide_header Set-Cookie;<br>proxy_cache ： 引用前面定义的缓存区 my-cache</p><p>proxy_cache_key ：定义如何生成缓存的键，设置web缓存的key值，nginx根据key值md5哈希存储缓存</p><p>proxy_cache_valid ： 为不同的响应状态码设置不同的缓存时间，比如200、302等正常结果可以缓存的时间长点，而404、500等缓存时间设置短一些，这个时间到了文件就会过期，而不论是否刚被访问过。</p><p>add_header指令来设置response header,语法: add_header name value;</p><p>$upstream_cache_status这个变量来显示缓存的状态，我们可以在配置中添加一个http头来显示这一状态，</p><p>$upstream_cache_status包含以下几种状态： </p><p>·MISS 未命中，请求被传送到后端<br>·HIT 缓存命中<br>·EXPIRED 缓存已经过期请求被传送到后端<br>·UPDATING 正在更新缓存，将使用旧的应答<br>·STALE 后端将得到过期的应答</p><p> expires ： 在响应头里设置Expires:或Cache-Control:max-age，返回给客户端的浏览器缓存失效时间。</p><h2 id="四、配置nginx反向代理：反向代理-负载均衡-健康探测"><a href="#四、配置nginx反向代理：反向代理-负载均衡-健康探测" class="headerlink" title="四、配置nginx反向代理：反向代理+负载均衡+健康探测"></a>四、配置nginx反向代理：反向代理+负载均衡+健康探测</h2><p>（1.）下面的Nginx.conf实现nginx在前端做反向代理服务器的完整配置文件的例子，处理js、png等静态文件，jsp/php等动态请求转发到其它服务器tomcat/apache</p><p>例如：<br>user  www www;<br>worker_processes  4;<br>worker_cpu_affinity 0001 0010 0100 1000;<br>error_log  logs/error.log;<br>#error_log  logs/error.log  notice;<br>#error_log  logs/error.log  info;<br>worker_rlimit_nofile 10240;<br>pid        logs/nginx.pid;<br>events {<br>    use epoll;<br>    worker_connections  4096;<br>}<br>http {<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    log_format  main  ‘$remote_addr - $remote_user [$time_local] “$request” ‘<br>                      ‘$status $body_bytes_sent “$http_referer” ‘<br>                      ‘“$http_user_agent” “$http_x_forwarded_for”‘<br>                      ‘“$upstream_cache_status”‘;<br>access_log  logs/access.log  main;<br>server_tokens off;<br>    sendfile        on;<br>    #tcp_nopush     on;<br>    #keepalive_timeout  0;<br>    keepalive_timeout  65;<br>    #Compression Settings<br>    gzip on;<br>    gzip_comp_level 6;<br>    gzip_http_version 1.1;<br>    gzip_proxied any;<br>    gzip_min_length 1k;<br>    gzip_buffers 16 8k;<br>    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;<br>    gzip_vary on;<br>    #end gzip<br>    # http_proxy Settings<br>    client_max_body_size   10m;<br>    client_body_buffer_size   128k;<br>    proxy_connect_timeout   75;<br>    proxy_send_timeout   75;<br>    proxy_read_timeout   75;<br>    proxy_buffer_size   4k;<br>    proxy_buffers   4 32k;<br>    proxy_busy_buffers_size   64k;<br>proxy_temp_file_write_size  64k;<br>proxy_buffering on;<br>    proxy_temp_path /usr/local/nginx1.10/proxy_temp;<br>    proxy_cache_path /usr/local/nginx1.10/proxy_cache levels=1:2 keys_zone=my-cache:100m max_size=1000m inactive=600m max_size=2g;<br>    #load balance Settings<br>    upstream backend {<br>        sticky;<br>        server 192.168.31.141:80 weight=1 max_fails=2 fail_timeout=10s;<br>        server 192.168.31.250:80 weight=1 max_fails=2 fail_timeout=10s;<br>    }<br>    #virtual host Settings<br>    server {<br>        listen       80;<br>        server_name  localhost;<br>        charset utf-8;<br>        location  ~/purge(/.*) {<br>           allow 127.0.0.1;<br>           allow 192.168.31.0/24;<br>           deny all;<br>           proxy_cache_purge my-cache $host$1$is_args$args;<br>        }<br>        location / {<br>            index  index.php index.html index.htm;<br>            proxy_pass        <a href="http://backend/">http://backend</a>;<br>            proxy_redirect off;<br>            proxy_set_header  Host  $host;<br>            proxy_set_header  X-Real-IP  $remote_addr;<br>            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;<br>            proxy_ignore_headers Set-Cookie;<br>proxy_hide_header Set-Cookie;<br>            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;<br>        }<br>        location ~ .<em>.(gif|jpg|png|html|htm|css|js|ico|swf|pdf)(.</em>) {<br>           proxy_pass  <a href="http://backend/">http://backend</a>;<br>           proxy_redirect off;<br>           proxy_set_header Host $host;<br>           proxy_set_header X-Real-IP $remote_addr;<br>           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>           proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;<br>           proxy_cache my-cache;<br>           add_header Nginx-Cache $upstream_cache_status;<br>           proxy_cache_valid 200 304 301 302 8h;<br>           proxy_cache_valid 404 1m;<br>           proxy_cache_valid any 1d;<br>           proxy_cache_key $host$uri$is_args$args;<br>           expires 30d;<br>        }<br>        location /nginx_status {<br>            stub_status on;<br>            access_log off;<br>            allow 192.168.31.0/24;<br>            deny all;<br>        }<br>    }<br>}</p><p>（2.）配置Nginx<br>[root@kang ~]# vim  /usr/local/nginx1.10/conf/nginx.conf</p><h3 id="常用指令说明"><a href="#常用指令说明" class="headerlink" title="常用指令说明:"></a>常用指令说明:</h3><p>main全局配置:</p><p>woker_processes 4<br>在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</p><p>worker_cpu_affinity<br>也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。</p><p>附：</p><p>CPU工作状况：（输入 top 后，按1 查看）</p><p>‘<br>上面的配置表示：1核CPU，开启1个进程。0001表示开启第一个cpu内核， 0010表示开启第二个cpu内核，依次类推；有多少个核，就有几位数，1表示该内核开启，0表示该内核关闭。</p><p>例如：</p><p>2核CPU，开启2个进程</p><p>worker_processes  2;</p><p>worker_cpu_affinity 01 10;<br>2核CPU，开启4进程</p><p>worker_processes 4;<br>worker_cpu_affinity 01 10 01 10;<br>2核CPU，开启8进程</p><p>worker_processes  8;<br>worker_cpu_affinity 01 10 01 10 01 10 01 10;<br>8核CPU，开启2进程</p><p>worker_processes  2;<br>worker_cpu_affinity 10101010  01010101;<br>说明：10101010表示开启了第2,4,6,8内核，01010101表示开始了1,3,5,7内核</p><p>通过 apache 的ab测试查看nginx对CPU的使用状况：</p><p>如果多个CPU内核的利用率都相差不多，证明nginx己经成功的利用了多核CPU。测试结束后，CPU内核的负载应该都同时降低。</p><p>worker_connections 4096<br>写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。<br>worker_rlimit_nofile 10240<br>写在main部分。worker进程的最大打开文件数限制。默认是没有设置，如果没设置的话，这个值为操作系统的限制(ulimit -n)。可以限制为操作系统最大的限制65535。把这个值设高，这样nginx就不会有“too many open files”问题了。</p><p>use epoll</p><p>写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。</p><p>http服务器:<br>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</p><p>sendfile on<br>开启高效文件传输模式。</p><p>keepalive_timeout 65 : </p><p>长连接超时时间，单位是秒，长连接请求大量小文件的时候，可以减少重建连接的开销，如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</p><p>client_max_body_size 10m<br>允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</p><p>client_body_buffer_size 128k<br>缓冲区代理缓冲用户端请求的最大字节数</p><p>server_tokens off;<br>隐藏nginx的版本号</p><p>模块http_proxy：<br>这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能</p><p>proxy_connect_timeout 60<br>nginx跟后端服务器连接超时时间(代理连接超时)</p><p>proxy_read_timeout 60</p><p>定义从后端服务器读取响应的超时。此超时是指相邻两次读操作之间的最长时间间隔，而不是整个响应传输完成的最长时间。如果后端服务器在超时时间段内没有传输任何数据，连接将被关闭。</p><p>定义向后端服务器传输请求的超时。此超时是指相邻两次写操作之间的最长时间间隔，而不是整个请求传输完成的最长时间。如果后端服务器在超时时间段内没有接收到任何数据，连接将被关闭。</p><p>proxy_buffer_size 4k<br>设置缓冲区的大小为size。nginx从被代理的服务器读取响应时，使用该缓冲区保存响应的开始部分。这部分通常包含着一个小小的响应头。该缓冲区大小默认等于proxy_buffers指令设置的一块缓冲区的大小，但它也可以被设置得更小。</p><p>proxy_buffers 8 4k<br>语法: proxy_buffers the_number is_size;<br>为每个连接设置缓冲区的数量为number，每块缓冲区的大小为size。这些缓冲区用于保存从被代理的服务器读取的响应。每块缓冲区默认等于一个内存页的大小。这个值是4K还是8K，取决于平台。</p><p>附：查看Linux内存页大小</p><p>[root@kang ~]# getconf PAGESIZE<br>4096<br>[root@kang ~]# </p><p>或者<br> getconf PAGE_SIZE<br>proxy_busy_buffers_size 64k</p><p>高负荷下缓冲大小（默认大小是proxy_buffers指令设置单块缓冲大小的2倍）</p><p> proxy_max_temp_file_size</p><p>当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M。</p><p> proxy_temp_file_write_size 64k</p><p>当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。</p><p>模块http_gzip：</p><p>gzip on : 开启gzip压缩输出，减少网络传输。</p><p>gzip_min_length 1k ： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。建议设置成大于1k的字节数，小于1k可能会越压越大。</p><p>gzip_buffers 4 16k ： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。416k代表以16k为单位，按照原始数据大小以16k为单位的4倍申请内存。如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果</p><p>gzip_http_version 1.1 ： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.1，故请设置为 1.1。</p><p>gzip_comp_level 6 ： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</p><p>gzip_types ：匹配mime类型进行压缩，无论是否指定”text/html”类型总是会被压缩的。</p><p>默认值: gzip_types text/html (默认不对js/css文件进行压缩)<br>#压缩类型，匹配MIME类型进行压缩<br>#不能用通配符 text/*<br>#(无论是否指定)text/html默认已经压缩<br>#设置哪压缩种文本文件可参考 conf/mime.types</p><p>gzip_proxied any ： Nginx作为反向代理的时候启用，根据某些请求和应答来决定是否在对代理请求的应答启用gzip压缩，是否压缩取决于请求头中的“Via”字段，指令中可以同时指定多个不同的参数，意义如下：</p><p>off – 关闭所有的代理结果数据的压缩<br>expired – 启用压缩，如果header头中包含 “Expires” 头信息<br>no-cache – 启用压缩，如果header头中包含 “Cache-Control:no-cache” 头信息<br>no-store – 启用压缩，如果header头中包含 “Cache-Control:no-store” 头信息<br>private – 启用压缩，如果header头中包含 “Cache-Control:private” 头信息<br>no_last_modified – 启用压缩,如果header头中不包含 “Last-Modified” 头信息<br>no_etag – 启用压缩 ,如果header头中不包含 “ETag” 头信息<br>auth – 启用压缩 , 如果header头中包含 “Authorization” 头信息<br>any – 无条件启用压缩</p><p> gzip_vary on ：和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</p><p>模块http_stream：<br>这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p><p>Location:</p><p>root /var/www/html</p><p>定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。</p><p>index index.jsp index.html index.htm</p><p>定义路径下默认访问的文件名，一般跟着root放</p><p>proxy_pass http:/backend</p><p>请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass <a href="http://ip:port。">http://ip:port。</a></p><p>proxy_redirectoff;</p><p>指定是否修改被代理服务器返回的响应头中的location头域跟refresh头域数值</p><p>例如：</p><p>设置后端服务器“Location”响应头和“Refresh”响应头的替换文本。假设后端服务器返回的响应头是 “Location: <a href="http://localhost:8000/two/some/uri/%E2%80%9D%EF%BC%8C%E9%82%A3%E4%B9%88%E6%8C%87%E4%BB%A4">http://localhost:8000/two/some/uri/”，那么指令</a></p><p>proxy_redirect<a href="http://localhost:8000/two/">http://localhost:8000/two/</a> <a href="http://frontend/one/">http://frontend/one/</a>;</p><p>将把字符串改写为 “Location: <a href="http://frontend/one/some/uri/%E2%80%9D%E3%80%82">http://frontend/one/some/uri/”。</a></p><p>proxy_set_header Host$host;</p><p>允许重新定义或者添加发往后端服务器的请求头。</p><p>Host的含义是表明请求的主机名，nginx反向代理服务器会向后端真实服务器发送请求，并且请求头中的host字段重写为proxy_pass指令设置的服务器。因为nginx作为反向代理使用，而如果后端真实的服务器设置有类似防盗链或者根据http请求头中的host字段来进行路由或判断功能的话，如果反向代理层的nginx不重写请求头中的host字段，将会导致请求失败。</p><p>proxy_set_headerX-Forwarded-For $proxy_add_x_forwarded_for;</p><p>后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</p><p>X_Forward_For字段表示该条http请求是有谁发起的？如果反向代理服务器不重写该请求头的话，那么后端真实服务器在处理时会认为所有的请求都来自反向代理服务器，如果后端有防攻击策略的话，那么机器就被封掉了。因此，在配置用作反向代理的nginx中一般会增加两条配置，修改http的请求头：<br>proxy_set_header Host $host;<br>proxy_set_header X-Forward-For $remote_addr;</p><p>proxy_next_upstream error timeoutinvalid_header http_500 http_502 http_503 http_504;</p><p>增加故障转移，如果后端的服务器返回502、504、执行超时等错误，自动将请求转发到upstream负载均衡池中的另一台服务器，实现故障转移。</p><p>proxy_set_headerX-Real-IP $remote_addr;</p><p>web服务器端获得用户的真实ip但是，实际上要获得用户的真实ip，也可以通过X-Forward-For</p><h2 id="五、验证：nginx反向代理的缓存功能、负载均衡及健康检查"><a href="#五、验证：nginx反向代理的缓存功能、负载均衡及健康检查" class="headerlink" title="五、验证：nginx反向代理的缓存功能、负载均衡及健康检查"></a>五、验证：nginx反向代理的缓存功能、负载均衡及健康检查</h2><p>（1.）下面我们来测试一下缓存功能</p><p>如果在缓存时间之内需要更新被缓存的静态文件怎么办呢，这时候就需要手动来清除缓存了。</p><p>ngx_cache_pure清除缓存模块使用说明</p><p>用谷歌浏览器测试的时候，可以按F12调用开发工具，选择Network选项，我们可以看到，Response Headers，在这里我们可以看到，我们请求的是否缓存</p><p>从图中我们可以看到，我们访问的服务器是192.168.197.169，缓存命中。</p><p>也可以查看缓存目录或nginx的访问日志</p><p>清除缓存:</p><p>上述配置的proxy_cache_purge指令用于方便的清除缓存，但必须按照第三方的 ngx_cache_purge 模块才能使用</p><p>使用 ngx_cache_purge 模块清除缓存（直接删除缓存目录下的文件也算一种办法）：<br>GET方式请求URL</p><p>即使用配置文件中的location ~ /purge(/.*)</p><p>浏览器访问<a href="http://192.168.197.169/purge/your/may/path%E6%9D%A5%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98">http://192.168.197.169/purge/your/may/path来清除缓存</a></p><p>缓存清除成功。</p><p>备注：<br>      （1）purge是ngx_cache_pure 模块指令<br>      （2）your/may/path 是要清除的缓存文件URL路径</p><p>（2.）测试负载均衡</p><p>访问Nginx服务器的ip地址，不停刷新页面浏览到后端的两台Apache网站，证明通过反向代理实现了负载均衡测试成功！！！</p><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><p>如何修改Nginx版本等信息</p><p>1、vi /usr/local/src/nginx-1.0.12/src/core/nginx.h   #编译前编辑</p><p>#define nginx_version<br>#define NGINX_VERSION<br>#define NGINX_VER<br>#define NGINX_VAR<br>修改上面的信息，即可更改nginx显示版本。<br>2、vi/usr/local/src/nginx-1.0.12/src/http/ngx_http_special_response.c   #编译前编辑<br>static u_char ngx_http_error_full_tail[] =<br>static u_char ngx_http_error_tail[] =<br>修改上面的信息为你自己的。<br>3、vi/usr/local/src/nginx-1.0.12/src/http/ngx_http_header_filter_module.c   #编译前编辑<br>static char ngx_http_server_string[]=<br>修改上面的信息为你自己的。<br>4、编译完成之后，修改/usr/local/nginx/conf目录下面<br>fastcgi.conf、fastcgi.conf.default、fastcgi_params、fastcgi_params.default<br>这四个文件里面的版本名称<br>/usr/local/nginx/sbin/nginx -V  #查看nginx版本号</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>（1.）Nginx的概念、特点、原理（正向、反向代理）、为什么使用Nginx？</p><p>（2.）Nginx的安装、</p><p>（3.）Nginx的优化、（gzip、cache、负载均衡、健康检查、CPU核数、最大连接数、开启epoll模型、第三方模块、模块优化）</p><p>（4.）验证Nginx网页、负载均衡、清除缓存、查看缓存等、</p><p>（5.）Nginx不能动态加载模块，需要提前编译时安装！！！</p><p><a href="https://me.csdn.net/weixin_45509582">原作者博客CSDN</a></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx反向代理+nginx性能优化配置详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo迁移至window+githubpush</title>
      <link href="post/undefined"/>
      <url>post/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ul><li>在windows上安装Git bash</li><li>在windows上安装nodejs</li><li>下载地址：<a href="https://www.git-scm.com/">Git bash</a> ,  <a href="https://nodejs.org/en/">nodejs</a><a id="more"></a></li><li>将如下几个文件，目录拷贝至新的电脑<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"> package.json</span><br><span class="line"> scaffolds/</span><br><span class="line"> source/</span><br><span class="line"> themes/</span><br></pre></td></tr></table></figure></li><li>迁移到linux环境：步骤基本一致，只需保证将以上四个目录拷贝至blog目录，再准备环境，安装hexo即可。<h2 id="Git-bash安装"><a href="#Git-bash安装" class="headerlink" title="Git bash安装"></a>Git bash安装</h2>安装Windows版的Git安装程序</li></ul><p><img src="https://img-blog.csdnimg.cn/20200930150734139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装组件：这里可以使用默认选项，点击【Next &gt;】</p><ul><li>图标组件（Additional icons）：选择是否创建桌面快捷方</li><li>桌面浏览（Windows Explorer integration）<ul><li>使用Git Bash方式，shell方式</li><li>受用桌面程序方式</li></ul></li><li>关联配置文件：是否关联git配置文件，该配置文件主要显示文本编辑器样式</li><li>关联shell脚本文件：是否关联Bash命令执行脚本文件</li><li>使用TrueType编码：在命令行中是否使用TrueType编码，该编码是微软和苹果公司制定的通用编码<br><img src="https://img-blog.csdnimg.cn/20200930151134715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>Git自带：使用Git自带的Git Bash命令行工具</li><li>系统自带CMD：使用windows系统的命令行工具</li><li>二者都有：上面二者同时配置，但是注意，这样会将windows中的find.exe和sort.exe工具覆盖，如果不懂这些尽量不要选择<br><img src="https://img-blog.csdnimg.cn/20200930151232313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其余默认下一步即可完成安装。</li></ul><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>因为Hexo基于Node.js开发，所以不管我们是Windwos环境还是Linux环境都需要安装Node.js才能完成Hexo的搭建，安装过程也很简单。<br>安装过程中这个Add to PATH要记得勾选，不然自己配置环境变量很麻烦<br><img src="https://img-blog.csdnimg.cn/20200930151338956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装hexo并推送至github"><a href="#安装hexo并推送至github" class="headerlink" title="安装hexo并推送至github"></a>安装hexo并推送至github</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">##安装hexo-cli</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">##查看版本</span><br><span class="line">hexo -v</span><br><span class="line">##安装所需模块</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>安装模块若出现报错请执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules &amp;&amp; npm install --force</span><br></pre></td></tr></table></figure><p>构建并发布</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>若出现此类报错如图：<br><img src="https://img-blog.csdnimg.cn/20200930152314309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##执行这条命令后正常</span><br><span class="line">git config --<span class="built_in">global</span> core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="免密部署"><a href="#免密部署" class="headerlink" title="免密部署"></a>免密部署</h2><p>公钥的话跟linux系统生成一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C example@<span class="number">163.</span>com</span><br></pre></td></tr></table></figure><p>然后公钥添加至<br><img src="https://img-blog.csdnimg.cn/20200930153334819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注意修改_config.yml文件中的repo地址，改为ssh方式</p><p>到这里迁移就完成了，<a href="https://alexcld.com/">作者博客</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo迁移至window+githubpush </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插入背景音乐</title>
      <link href="post/undefined"/>
      <url>post/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="hexo插入音乐"><a href="#hexo插入音乐" class="headerlink" title="hexo插入音乐"></a>hexo插入音乐</h1><p><a href="https://alexcld.com/">可以到我的博客参考一下样式</a></p><p>两种方式：</p><a id="more"></a><ul><li>单个音乐</li><li>歌单<h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3>这种方式比较简单，直接到网易云搜索需要添加的背景音乐然后生成外链，将外链粘贴到sidebar.swig里边，可以切换粘贴位置以达到自己需要的效果。<br>这里随便找了首歌的外链粘了进去<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /blog/themes/next/layout/_macro/sidebar.swig</span><br><span class="line"></span><br><span class="line">&lt;iframe frameborder=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> marginwidth=<span class="string">&quot;0&quot;</span> marginheight=<span class="string">&quot;0&quot;</span> width=<span class="number">330</span> height=<span class="number">86</span> src=<span class="string">&quot;//music.163.com/outchain/player?type=3&amp;id=2069329741&amp;auto=1&amp;height=66&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3>以歌单的形式插入背景音乐，具体操作如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">vim /blog/themes/next/layout/_macro/sidebar.swig</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="built_in">require</span> APlayer --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- <span class="built_in">require</span> MetingJS--&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!--网易云--&gt;</span><br><span class="line">    &lt;meting-js</span><br><span class="line">      server=<span class="string">&quot;netease&quot;</span></span><br><span class="line">      id=<span class="string">&quot;3129764102&quot;</span></span><br><span class="line">          type=<span class="string">&quot;playlist&quot;</span></span><br><span class="line">          mini=<span class="string">&quot;false&quot;</span></span><br><span class="line">      fixed=<span class="string">&quot;false&quot;</span></span><br><span class="line">      list-folded=<span class="string">&quot;true&quot;</span></span><br><span class="line">      autoplay=<span class="string">&quot;true&quot;</span></span><br><span class="line">      volume=<span class="string">&quot;0.4&quot;</span></span><br><span class="line">      theme=<span class="string">&quot;#FADFA3&quot;</span></span><br><span class="line">      order=<span class="string">&quot;random&quot;</span></span><br><span class="line">          loop=<span class="string">&quot;all&quot;</span></span><br><span class="line">      preload=<span class="string">&quot;auto&quot;</span></span><br><span class="line">      mutex=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;/meting-js&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/aside&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;sidebar-dimmer&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><a href="https://github.com/metowolf/MetingJS">可参考属性</a><br><img src="https://img-blog.csdnimg.cn/20200925165345366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUwOTU4Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><a href="https://alexcld.com/">效果</a><br><img src="https://img-blog.csdnimg.cn/20200925165548731.png#pic_center" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo插入背景音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo插入图片及控制大小</title>
      <link href="post/undefined"/>
      <url>post/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先说下hexo插入图片的方式有哪些，hexo默认集成了markdown语法，这里我们就markdown里显示图片的方式引入html方法,三种方法有优有劣，关键看自己的习惯了</p><ul><li>第一种是直接引用markdown插入</li><li>第二种是使用html来引用插入<a id="more"></a></li><li>第三种是之前有讲到过插件引用</li></ul><h2 id="直接引用markdown插入"><a href="#直接引用markdown插入" class="headerlink" title="直接引用markdown插入"></a>直接引用markdown插入</h2><ul><li>首先是直接引用的方法需要在images目录里放入需要引入的图片<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![lena](https:<span class="comment">//alexcld.com/images/pengyuyan.jpg)</span></span><br></pre></td></tr></table></figure></li><li>我这里就直接引用之前的图片了，图片链接自己可以在网上找，</li><li>本地图片的话可以直接使用路径来引用</li><li>这种方法可以是可以，有点小缺点：图片就会靠在左侧，大小也不由自己决定</li></ul><h2 id="使用html方法引入"><a href="#使用html方法引入" class="headerlink" title="使用html方法引入"></a>使用html方法引入</h2><ul><li>第二种就是使用html来引用插入的图片<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;https://alexcld.com/images/pengyuyan.jpg&quot;</span> width=<span class="number">256</span> height=<span class="number">256</span> /&gt;</span><br></pre></td></tr></table></figure></li><li>固定图片大小：width=256,height=256设置的是显示图像的尺寸，src后面接的就是图像对象</li><li>还可以使用百分比的方式来给width,height传参<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;https://alexcld.com/images/pengyuyan.jpg&quot;</span> width=<span class="string">&quot;50%&quot;</span> height=<span class="string">&quot;50%&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li><li>其中width和height后面的50%就是根据窗口的大小以一定的比例显示图片。值得一说的是，这种按照百分比显示方法，是以width方向为准，并保持纵横比的，换句话说，把设置width的部分去掉，height的值改为任意百分比，显示的图像都是原图大小（个人觉得这根博客窗口有关，毕竟现实截面的宽度相对是固定的，而高度/长度却是变化着的）。因此用此方法的时候，可以把height设置缺省</li><li>如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;https://alexcld.com/images/pengyuyan.jpg&quot;</span> height=<span class="string">&quot;5%&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li><li>如果想给图像加个标注，可以这么做：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;https://alexcld.com/images/pengyuyan.jpg&quot;</span> width=<span class="string">&quot;25%&quot;</span> height=<span class="string">&quot;25%&quot;</span> /&gt;</span><br><span class="line">Figure <span class="number">1.</span> xx</span><br><span class="line">&lt;/center&gt;</span><br></pre></td></tr></table></figure></li><li>如果想让图和标注间距离增大，可以这么做：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;https://alexcld.com/images/pengyuyan.jpg&quot;</span> width=<span class="string">&quot;25%&quot;</span> height=<span class="string">&quot;25%&quot;</span> /&gt;</span><br><span class="line">$ $</span><br><span class="line">Figure <span class="number">1.</span> xx</span><br><span class="line">&lt;/center&gt;</span><br></pre></td></tr></table></figure><h2 id="第三种就是是用插件的方式来进行引用图片"><a href="#第三种就是是用插件的方式来进行引用图片" class="headerlink" title="第三种就是是用插件的方式来进行引用图片"></a>第三种就是是用插件的方式来进行引用图片</h2>具体的细节我这里就不再多讲了，可以看下之前的文章：<a href="https://alexcld.com/2020/08/14/%E8%A7%A3%E5%86%B3Hexo%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/">插件的方式引入图片</a><br>效果图的话可以看这里：<a href="https://alexcld.com/2020/09/14/phototest/">效果图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo插入图片及控制大小 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《若能与你共乘海浪之上》</title>
      <link href="post/undefined"/>
      <url>post/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>剧情大部分是快进看完的<br>何必为了一句承诺<br>女主精神失常 男主失去生命<br>若能与你共乘海浪之上</p><a id="more"></a><img src="https://china-img.soulapp.cn/image/2020-09-14/f10bb896-7c9e-4e7e-8559-9e3f99bfc757-1600046808195.png?x-oss-process=image/resize,m_lfit,w_750," width="70%" />]]></content>
      
      
      <categories>
          
          <category> 好剧推荐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 好剧推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插入图片</title>
      <link href="post/undefined"/>
      <url>post/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>版本：Hexo5.0.2（Hexo3以上即可）</p><p>解决方案如下：</p><ul><li><p>修改配置文件</p><a id="more"></a></li><li><p>在根目录下配置文件_config.yml 中有 post_asset_folder:false改为true。</p></li><li><p>这样在建立文件时，Hexo会自动建立一个与文章同名的文件夹，这样就可以把与该文章相关的所有资源（图片）都放到那个文件夹里方便后面引用</p></li><li><p>我这里放的图片是：sky2.jpg</p></li><li><p>安装插件：hexo-asset-image(插件经测试无问题)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:<span class="comment">//github.com/7ym0n/hexo-asset-image --save（使用cnpm速度相当会快点，当然npm也可以滴）</span></span><br></pre></td></tr></table></figure></li><li><p>使用这个插件来引入图片，而不是网上那些方法里说的用传统md语法相对路径的方法。</p></li><li><p>插入图片时用这种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img sky2.jpg This is an test image %&#125;</span><br></pre></td></tr></table></figure></li><li><p>其中sky2.jpg就是你要引用的图片，我这里就是sky2.jpg，后面的This is an test image是图片描述，可以自己修改。</p></li></ul><p>具体示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: A sunny day</span><br><span class="line">date: <span class="number">2020</span>-<span class="number">0</span>8-<span class="number">14</span> <span class="number">11</span>:<span class="number">24</span>:<span class="number">30</span></span><br><span class="line">tags:</span><br><span class="line">        - weather</span><br><span class="line">categories:</span><br><span class="line">        - daily</span><br><span class="line">---</span><br><span class="line">晴れた日より?菜が必要です。</span><br><span class="line">&#123;% asset_img sky2.jpg This is an test image %&#125;</span><br><span class="line">&#123;% asset_img sky3.jpg This is an test image %&#125;</span><br></pre></td></tr></table></figure><ul><li>这样就能成功显示了，测试下吧：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></li></ul><p><a href="http://alexcld.com/" title="作者博客">Alex博客</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo插入图片 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
